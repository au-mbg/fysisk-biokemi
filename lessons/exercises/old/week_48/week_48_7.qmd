---
title: "Determination of reaction order and activation energy"
categories: ['data', 'plotting', 'regression']
topics: []
datasets: ['week48_7_reaction_order_activation.csv']
---


## Determination of reaction order and activation energy

```{python}
#| code-fold: true
import numpy as np  
import matplotlib.pyplot as plt
```

The irreversible isomerization of compound A to compound B results in a decreasing
absorbance. The isomerization was followed in a time course at two different temperatures
(T1 = 25 °C and T2 = 40 °C). The absorbance ($\epsilon$ = 16700 $\mathrm{cm}^{-1} \mathrm{M}^{-1}$) was used to 
calculate the concentration of compound A in a spectrophotometer with a pathlength 
of 1 cm. The obtained dataset is given in the file `week48_7_reaction_order_activation.csv`.

#### (a) Temperatures 

What are the two temperatures in Kelvin? Set them as varilabes in the cell below. 

```{python}
#| exercise: true
#| eval: false
T1 = 25 + 273.15
T2 = 40 + 273.15
```

```{python}
#| solution: true
T1 = 25 + 273.15
T2 = 40 + 273.15
```

#### (b) Load the dataset

Load the dataset using the widget below

```{python}
#| eval: false
from fysisk_biokemi.widgets import DataUploader
from IPython.display import display 
uploader = DataUploader()
uploader.display()
```

Run the next cell **after** uploading the file

```{python}
#| eval: false
df = uploader.get_dataframe()
display(df)
```

```{python}
#| solution: true
from IPython.display import display 
from fysisk_biokemi.datasets import load_dataset
df = load_dataset('reaction_order_activation_week48') # Load from package for the solution so it doesn't require to interact.
display(df)
```
#### (c) SI Units

Calculate the concentration of A at each timepoint in SI units, by adding new columns to the `DataFrame`.

```{python}
#| exercise: true
#| eval: false
extinction_coeff = ...
L = 1 # Path length

df['[A]_(M)_25C'] = ... # For 25 C
... # For 40 C
display(df)
```

```{python}
#| solution: true
extinction_coeff = 16700 
L = 1 # Path length

df['[A]_(M)_25C'] = df['Abs(t)_25C'] / (extinction_coeff * L)
df['[A]_(M)_40C'] = df['Abs(t)_40C'] / (extinction_coeff * L)
display(df)
```

#### (d) Plot the data

We will be resuing the plot, so we will put the code for it in a function.

```{python}
#| exercise: true
#| eval: false
def plot_dataframe(ax, df):
    # Extract from dataframe
    t = ...
    A_25 = ...
    A_40 = ...

    # First subfigure: t vs [A]
    ax.plot(..., ..., 'o', label='[A]_25C')
    ... # Add the code to plot the 40C data.
    ax.set_xlabel('t (s)')
    ax.set_ylabel('[A] (M)')
    ax.legend()
```

```{python}
#| solution: true
def plot_dataframe(ax, df):
    # Extract from dataframe
    t = df['t_(s)']
    A_25 = df['[A]_(M)_25C']
    A_40 = df['[A]_(M)_40C']

    # First subfigure: t vs [A]
    ax.plot(t, A_25, 'o', label='[A]_25C')
    ax.plot(t, A_40, 'o', label='[A]_40C')
    ax.set_xlabel('t (s)')
    ax.set_ylabel('[A] (M)')
    ax.legend()
```

You can run this next cell to see your plot and adjust as neccesarry. 

```{python}
fig, ax = plt.subplots()
plot_dataframe(ax, df)
```

#### (e) Determine reaction order

In the exercise on "Determination of reaction orders" we saw how we can fit to the 
expressions for the integrated rate laws to determine the reaction order. 

In that exercise we wrote the functions in the next two cells, we will reuse them here

```{python}
def zeroth_order(t, k, A0):
    return A0 - k*t

def first_order(t, k, A0):
    return A0 * np.exp(-k*t)

def second_order(t, k, A0):
    return A0 / (1 + 2*k*t*A0)

rate_laws = {0: zeroth_order, 1: first_order, 2:second_order}
```


```{python}
from scipy.optimize import curve_fit

def make_fit(x_data, y_data, x_eval, A0, order):
    func = lambda t, k: rate_laws[order](t, k, A0)
    popt, pcov = curve_fit(func, x_data, y_data)

    # Evaluate fit at new points
    k = popt[0]
    y_fit_new = func(x_eval, k)
    
    # Evaluate fit at data-points to calculate residuals
    y_fit_data = func(x_data, k)
    residuals = y_data - y_fit_data

    return k, y_fit_new, residuals
```

Now we need to set a few things before we can do the fitting

```{python}
#| exercise: true
#| eval: false
t = ... # Extract the time from the dataframe
A_25 = ... # Extract the concentration at 25C
A_40 = ... # Extract the concentration at 40C
A0_25 = ... # Set the initial concentration at 25C
A0_40 = ... # Set the initial concentration at 40C
```

```{python}
#| solution: true
t = df['t_(s)']
A_25 = df['[A]_(M)_25C']
A_40 = df['[A]_(M)_40C']
A0_25= A_25[0]
A0_40 = A_40[0]
```

::: {.callout-tip}
You've already calculated the initial concentration, it is contained in the `DataFrame`.
:::

Now we can use our plotting and fitting functions to analyze the data

```{python}
#| exercise: true
#| eval: false
fig, axes = plt.subplots(2, 3, figsize=(8, 6), sharey='row', layout='constrained')

for ax in axes.T:
    plot_dataframe(ax[1], df)

orders = [0, 1, 2]
t_eval = np.linspace(0, t.max()*1.05)

for ax_col, order in zip(axes.T, orders):
    # Calculate the fits
    k25, y_fit_25, residuals_25 = make_fit(t, A_25, t_eval, A0_25, order)
    k40, y_fit_40, residuals_40 = make_fit(t, A_40, t_eval, A0_40, order)

    # Plot the fits
    ax = ax_col[1]
    ax.plot(t_eval, y_fit_25, color='k')
    ax.plot(t_eval, y_fit_40, color='k')
    ax.text(0.05, 0.15, f'k (25 C) = {k25:.4f}', transform=ax.transAxes)
    ax.text(0.05, 0.05, f'k (40 C) = {k40:.4f}', transform=ax.transAxes)

    ax.legend()

    # Plot the residuals
    ax = ax_col[0]
    ax.hist(residuals_25, facecolor='C0', alpha=0.75, edgecolor='k', label='25 C')
    ax.hist(residuals_40, facecolor='C1', alpha=0.75, edgecolor='k', label='40 C')
    ax.set_xlabel('Residual')    
    ax.set_ylabel('Count')
    ax.legend()

    ax.set_title(f'Reaction order: {order}')
```

```{python}
#| solution: true
fig, axes = plt.subplots(2, 3, figsize=(8, 6), sharey='row', layout='constrained')

for ax in axes.T:
    plot_dataframe(ax[1], df)

orders = [0, 1, 2]
t_eval = np.linspace(0, t.max()*1.05)

for ax_col, order in zip(axes.T, orders):
    # Calculate the fits
    k25, y_fit_25, residuals_25 = make_fit(t, A_25, t_eval, A0_25, order)
    k40, y_fit_40, residuals_40 = make_fit(t, A_40, t_eval, A0_40, order)

    # Plot the fits
    ax = ax_col[1]
    ax.plot(t_eval, y_fit_25, color='k')
    ax.plot(t_eval, y_fit_40, color='k')
    ax.text(0.05, 0.15, f'k (25 C) = {k25:.4f}', transform=ax.transAxes)
    ax.text(0.05, 0.05, f'k (40 C) = {k40:.4f}', transform=ax.transAxes)

    ax.legend()

    # Plot the residuals
    ax = ax_col[0]
    ax.hist(residuals_25, facecolor='C0', alpha=0.75, edgecolor='k', label='25 C')
    ax.hist(residuals_40, facecolor='C1', alpha=0.75, edgecolor='k', label='40 C')
    ax.set_xlabel('Residual')    
    ax.set_ylabel('Count')
    ax.legend()

    ax.set_title(f'Reaction order: {order}')
```

Based on these plots 

- What do you think the reaction order of the reaction is?
- What's the rate constant? 
- What the unit of the rate constant? 

#### (f) Half-life 

What is the half-life of the reaction at these temperatures and is it constant through-out the reaction?

#### (g) Activation energy

With the assumption that the Arrhenius constant A and the activation energy are temperature independent
in the interval measured, use the Arrhenius equation to calculate the activation energy of the isomerization
of the compound A.

Perform the calculation in the cell below.
```{python}
#| eval: false
...
```