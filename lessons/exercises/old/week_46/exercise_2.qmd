---
title: "Average properties of amino acids and proteins"
categories: ['calculation', 'data']
topics: []
datasets: ['AA_frequency']
---


## Average properties of amino acids and proteins. 

```{python}
#| code-fold: true
import numpy as np
```

In the accompanying Excel file (`week46_1_AA_frequency.xlsx`), you will find a table that contains the molecular weight of the 20 common amino acid residues, i.e. their weight as residues in a peptide chain. Additionally, you will find their relative frequency in E. coli proteins, where a frequency of 0.01 means that this residue constitutes 1 % of the residues in a protein. 

#### (a) Load the data file.

Use the widget below to load the `week46_1_AA_frequency.xlsx` file.

```{python}
#| eval: true
from IPython.display import display 
from fysisk_biokemi.widgets import DataUploader
uploader = DataUploader()
uploader.display()
```

The command below will display the table as a `DataFrame`.

```{python}
#| eval: false
df = uploader.get_dataframe()
display(df)
```

```{python}
#| solution: true
from IPython.display import display 
from fysisk_biokemi.datasets import load_dataset
df = load_dataset('AA_frequency')
display(df)
```

#### (b)	Average molecular weight 

Calculate the average molecular weight of a residue in a protein. To do this our procedure 
will be as follows

1. First calculate the residue weight times its frequency in proteins for each residue.
2. Sum these together to get the average molecular weight.

In the cell below finish the calculation of `weight_times_freq` by extracting the `"MW of AA residue"`-column 
and `"Frequency in proteins"` and multiplying them together. 

::: {.callout-tip}

You can index in the dataframe by using the column name, for example to get the `"MW of AA residue"`-column you would do 

```python
col = df["MW of AA residue"]
```
Arrays also allows us to operate on every element in the array at the same time, so 
arrays can be added, subtracted, multiplied, divided, etc, see for example this figure 

![](https://numpy.org/doc/stable/_images/np_array_dataones.png)
![](https://numpy.org/doc/stable/_images/np_sub_mult_divide.png)

:::

```{python}
#| exercise: true
#| eval: false
weight_times_freq = ...
```

```{python}
#| solution: true
weight_times_freq = df['MW of AA residue'] * df['Frequency in proteins']
```

::: {.callout-tip}

You can use `np.sum` to sum all values in an array. For example

```python
array = np.array([1, 2, 3, 4, 5])
sum_of_array = np.sum(array) # Gives 15 
```

::: 

```{python}
#| exercise: true
#| eval: false
average_mw = ...
print(f"{average_mw = :.3f}")
```

```{python}
#| solution: true
average_mw = np.sum(weight_times_freq)
print(f"{average_mw = :.3f}")
```

::: {.callout-note}

The syntax `f"{average_mw = :.3f}"` is just a way of printing the value with a nicer format, 
in this case we print the value to 3 decimal places. 
In Python these are called f-strings, you don't need to understand the details at the moment. 

::: 

#### (c)	Weight of 300-residue protein 

What would the molecular weight of a 300-residue protein most likely be, if you did not know its sequence?

```{python}
#| exercise: true
#| eval: false
mw_300 = ...
print(f"{mw_300 = :.3f}")
```

```{python}
#| solution: true
mw_300 = average_mw * 300
print(f"{mw_300 = :.3f}")
```


--- 

In many projects, you will be working with a mixture of proteins. This could for example be a cell lysate or a biological fluid for protein abundance analysis, or the early stages of a protein purification process. In these situations, you cannot work with a molecule specific extinction coefficient. Instead, we would use the average values, which we will determine below.

---

#### (d)	Average concentration of residues 

Calculate the average concentration of amino acid residues in a protein mixture at 1 mg/mL.

```{python}
#| exercise: true
#| eval: false
c_residue_avg = ...
print(f"{c_residue_avg = :3.3f} M")
```

```{python}
#| solution: true
c_residue_avg = 1 / average_mw
print(f"{c_residue_avg = :3.3f} M")
```

#### (e)	Absorbance 

Calculate the absorbance from such a mixture under the assumption that only Trp and Tyr contribute.

```{python}
#| exercise: true
#| eval: false
freq = df.set_index("Name")["Frequency in proteins"]
f_trp = freq["Tryptophan (Trp/W)"]
f_tyr = freq["Tyrosine (Tyr/Y)"]
c_trp = ... # Erstat med din kode.
c_tyr = ... # Erstat med din kode.

print(f"{c_trp = :3.5f}")
print(f"{c_tyr = :3.5f}")
```

```{python}
#| solution: true
freq = df.set_index("Name")["Frequency in proteins"]
f_trp = freq["Tryptophan (Trp/W)"]
f_tyr = freq["Tyrosine (Tyr/Y)"]

c_trp = c_residue_avg * f_trp
c_tyr = c_residue_avg * f_tyr
print(f"{c_trp = :3.5f}")
print(f"{c_tyr = :3.5f}")
```
```{python}
#| exercise: true
#| eval: false
A280 = ... # Erstat med din kode.
print(f"{A280 = :3.3f}")
```

```{python}
#| solution: true
L = 1 # Path length
A280 = L * (5500 * c_trp + 1490 * c_tyr)
print(f"{A280 = :3.3f}")
```

#### (f)	Adsorbance $\rightarrow$ concentration 

For a cell lysate, you measure and absorbance of 0.78 at a path length of 0.5 cm. What is the protein concentration?

```{python}
#| exercise: true
#| eval: false

# Set known values:
A = 0.78 # Unitless
l = 0.5 # cm

# Extract frequencies
freq = df.set_index("Name")["Frequency in proteins"]
f_trp = freq["Tryptophan (Trp/W)"]
f_tyr = freq["Tyrosine (Tyr/Y)"]

# Calculate extintinction coefficent in [L/(mol cm)]
eps_mix = ...
# Calculate molar concentration [mol/L]
c_res = ...
# Calculate concentration [g/L] = [mg/mL]:
conc_mg_per_mL = ...
print(f"Protein concentration = {conc_mg_per_mL:.3f} mg/mL")
```

```{python}
#| solution: true

# Set known values:
A = 0.78 # Unitless
l = 0.5 # cm

# Extract frequencies
freq = df.set_index("Name")["Frequency in proteins"]
f_trp = freq["Tryptophan (Trp/W)"]
f_tyr = freq["Tyrosine (Tyr/Y)"]

# Calculate extintinction coefficent in [L/(mol cm)]
eps_mix = 5500 * f_trp + 1490 * f_tyr
# Calculate molar concentration
c_res = A / (l * eps_mix) # [mol/L]
# Calculate concentration:
conc_mg_per_mL = c_res * average_mw # [g/mol] = [mg/mL] because mw is [g/mol]
print(f"Protein concentration = {conc_mg_per_mL:.3f} mg/mL")
```