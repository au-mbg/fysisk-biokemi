## Interpretation of binding data. 

```{python}
import numpy as np
```

The `week48_1_interpret.xlsx` contains protein binding dataset. 

#### (a) Load the dataset

Load the dataset using the widget below

```{python}
#| eval: false
import numpy as np
from fysisk_biokemi.widgets import DataUploader
from IPython.display import display 
uploader = DataUploader()
uploader.display()
```

Run the next cell **after** uploading the file

```{python}
#| eval: false
df = uploader.get_dataframe()
display(df)
```

```{python}
#| solution: true
from IPython.display import display 
from fysisk_biokemi.datasets import load_dataset
df = load_dataset('interpret_week48') # Load from package for the solution so it doesn't require to interact.
display(df)
```

#### (b) SI Units

Add a new column to the `DataFrame` with the ligand concentration in SI units.

```{python}
#| exercise: true
#| eval: false
... # Replace ... with your code.
display(df)
```

```{python}
#| solution: true
df['[L]_(M)'] = df["[L]_(uM)"] * 10**(-6)
display(df)
```

#### (c) Plot the data 

Make plots of the binding data directly with a linear and logarithmic x-axis. 

Estimate Kd by visual inspection of these plots! 

```{python}
#| exercise: true
#| eval: false
import matplotlib.pyplot as plt

# This makes a figure with two axes.
fig, axes = plt.subplots(1, 2, figsize=(9, 4))

# Can with [0] to plot in the first axis.
ax = axes[0]
ax.plot(..., ..., 'o') # Replace ... with your code.
ax.set_xlabel('[L](M)', fontsize=14)
ax.set_ylabel(r'$\bar{n}$', fontsize=14)

ax = axes[1]
... # Put some code here - perhaps you can copy it from somewhere?
ax.set_xscale('log')
```

```{python}
#| solution: true
import matplotlib.pyplot as plt

# This makes a figure with two axes.
fig, axes = plt.subplots(1, 2, figsize=(9, 4))

# Can with [0] to plot in the first axis.
ax = axes[0]
ax.plot(df['[L]_(M)'], df['nbar'], 'o') # Replace ... with your code.
ax.set_xlabel('[L](M)', fontsize=14)
ax.set_ylabel(r'$\bar{n}$', fontsize=14)

ax = axes[1]
ax.plot(df['[L]_(M)'], df['nbar'], 'o')
ax.set_xlabel('[L](M)', fontsize=14)
ax.set_ylabel(r'$\bar{n}$', fontsize=14)
ax.set_xscale('log')
```

::: {.callout-tip}

Ths command `ax.set_xscale('log')` tells `matplotlib` that we want the x-axis to use a log-scale.

::: 

```{python}
#| exercise: true
#| eval: false
k_d_estimate = ...
```

```{python}
#| solution: true
k_d_estimate = 5 * 10**(-5)
```

#### (d) Make a fit

Make a fit to determine $K_D$, as always we start by implementing the function 
to fit with

```{python}
#| exercise: true
#| eval: false
def ... # Give the function an appropriate name.
    return ... # Implement the expression for nbar
```

```{python}
#| solution: true
def n_bar(L, K_D):
    return L / (L + K_D)
```

And then we can make the fit

```{python}
#| exercise: true
#| eval: false
from scipy.optimize import curve_fit

# Choose the variables from the dataframe
x = ... # Choose x-data from the dataframe
y = ... # Choose y-data from the dataframe

# Initial guess
p0 = [k_d_estimate]

# Bounds
bounds = (0, np.inf) # We limit the parameters to be positve.

# Curve fit
popt, pcov = ... # Call the curve_fit function.

# Print the parameters
k_d_fit = popt[0]
print(f"{k_d_fit = :e}")
```

```{python}
#| solution: true
from scipy.optimize import curve_fit

# Choose the variables from the dataframe
x = df['[L]_(M)']
y = df['nbar']

# Initial guess
p0 = [k_d_estimate]

# Bounds
bounds = (0, np.inf) # We limit the parameters to be positve.

# Curve fit
popt, pcov = curve_fit(n_bar, x, y, p0=p0, bounds=bounds)

# Print the parameters
k_d_fit = popt[0]
print(f"{k_d_fit = :e}")
```

#### Compare 

Use the figure below to compare your guess with the fitted value.

```{python}
#| solution: true
#| code-fold: true
import matplotlib.pyplot as plt

# This makes a figure with two axes.
fig, axes = plt.subplots(1, 2, figsize=(9, 4))

# Can with [0] to plot in the first axis.
ax = axes[0]
ax.plot(df['[L]_(M)'], df['nbar'], 'o')
ax.axvline(k_d_estimate, label='Estimate', color='C1')
ax.axvline(k_d_fit, label='Fit', color='C2')
ax.legend()

ax.set_xlabel('[L](M)', fontsize=14)
ax.set_ylabel(r'$\bar{n}$', fontsize=14)

ax = axes[1]
ax.plot(df['[L]_(M)'], df['nbar'], 'o')
ax.set_xlabel('[L](M)', fontsize=14)
ax.set_ylabel(r'$\bar{n}$', fontsize=14)
ax.axvline(k_d_estimate, label='Estimate', color='C1')
ax.axvline(k_d_fit, label='Fit', color='C2')
ax.legend()
ax.set_xscale('log')
```

#### Saturation 

Based on the value of $K_D$ found from the fit, 

- At which concentration do you expect 10% saturation?
- At which concentration do you expect 90% saturation?
