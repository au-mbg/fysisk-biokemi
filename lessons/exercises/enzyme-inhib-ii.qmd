## Enzyme inhibitors (II)

```{python}
#| code-fold: true
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit
pd.set_option('display.max_rows', 6)
```

Two enzyme inhibitors were identified as part of a drug discovery program. To characterize the mechanism of action, the reaction kinetics were analysed for the enzyme alone and in the presence of 5 $\mu$M of each of the inhibitors as a function of substrate concentration resulting in the data in the file `enzyme-inhib-ii.xlsx`

Load the dataset

```{python}
#| eval: false
from fysisk_biokemi.widgets import DataUploader
from IPython.display import display 
uploader = DataUploader()
uploader.display()
```

Run the next cell **after** uploading the file

```{python}
#| eval: false
df = uploader.get_dataframe()
display(df)
```

```{python}
#| solution: true
from IPython.display import display 
from fysisk_biokemi.datasets import load_dataset
df = load_dataset('week49_7') # Load from package for the solution so it doesn't require to interact.
display(df)

```

#### (a) Convert & plot

Convert the measurements to SI units and plot the reaction rate against time for all three reactions. 

Start by converting the units 
```{python}
#| exercise: true
#| eval: false
... # Your code to convert units here.
```

```{python}
#| solution: true
df['[S]_(M)'] = df['[S]_(uM)'] * 10**(-6)
df['enz_(M/s)'] = df['enz_(nM/s)'] * 10**(-9)
df['inhibitor2_(M/s)'] = df['inhibitor2_(nM/s)'] * 10**(-9)
df['inhibitor3_(M/s)'] = df['inhibitor3_(nM/s)'] * 10**(-9)
```

And then plot 

```{python}
#| exercise: true
#| eval: false

fig, ax = plt.subplots()

col_names = ['enz_(M/s)', 'inhibitor2_(M/s)', 'inhibitor3_(M/s)']

for col_name in col_names:
    ax.plot(..., ..., 'o', label=col_name) # Replace ... with your code here. 
    
ax.legend()
ax.set_xlabel('Substrate concentration [M]', fontsize=14)
ax.set_ylabel('$V_0$', fontsize=14)
plt.show()
```

```{python}
#| solution: true
#| fig-align: center

fig, ax = plt.subplots()

col_names = ['enz_(M/s)', 'inhibitor2_(M/s)', 'inhibitor3_(M/s)']

for col_name in col_names:
    ax.plot(df['[S]_(M)'], df[col_name], 'o', label=col_name)

ax.legend()
ax.set_xlabel('Substrate concentration [M]', fontsize=14)
ax.set_ylabel('$V_0$', fontsize=14)
plt.show()
```

Based on the appearance of these plots:

- Can you determine the type of inhibition? 
- Alternatively, can you exclude some mechanisms?

#### (b) Intuit parameters

Based on your answer to in (a) what do you expect for the parameters $K_M$ and $V_\mathrm{max}$? 

- Which dataset would have the highest $V_\mathrm{max}$, which the lowest? 
- What about $K_M$? 

#### (c) Fit

As always, we need the function we're fitting with 

```{python}
def michaelis_menten(S, Vmax, Km):
    return (Vmax * S) / (S + Km)
```

Given we're fitting on multiple datasets we will make our lives a bit easier by making a little function

```{python}
#| exercise: true
#| eval: false

def fit_parameters(df, col_name):
    popt, _ = curve_fit(..., ..., ...) # Replace ... with your code.
    vmax, km = popt
    # Printing
    print(f'{col_name}:')
    print(f'\t V_max = {vmax:.2e}')
    print(f'\t Km = {km:.2e}')
```

```{python}
#| solution: true

def fit_parameters(df, col_name):
    popt, _ = curve_fit(michaelis_menten, df['[S]_(M)'], df[col_name])
    vmax, km = popt
    # Printing
    print(f'{col_name}:')
    print(f'\t V_max = {vmax:.2e}')
    print(f'\t Km = {km:.2e}')
```

```{python}
#| exercise: true
#| eval: false

for col_name in col_names:
    fit_parameters(df, col_name)
```

```{python}
#| solution: true

for col_name in col_names:
    fit_parameters(df, col_name)
```

#### (d) Change

In the fits above you will likely see that all the fitted parameters change between the different data sets â€“ some by a little and some by a lot. How big does a change have to be to be considered significant?

#### (e) $K_i$

Determine the $K_i$ for each of the two inhibitors. 

