## The fluorescent protein "mCherry".

The spectra of many fluorescent proteins can be found at the website: [www.fpbase.org](https://www.fpbase.org/). Go to FPbase and search for “mCherry”. 

#### (a) Find parameters. 

Find the following parameters for the protein

- Extinction coefficient at absorbance maximum 
- Quantum yield 
- The organism from which it was originally isolated
- Molecular weight

Save them to seperate variables in the cell below.

```{python}
#| solution: true
QY = 0.22
EC = 72000 # [1/(M cm)]
organism = "Discosoma sp."
m_w = 26.7 * 10**3 # From fpbase
```

```{python}
#| exercise: true
#| eval: false
... # Your answers here. 
```

#### (b)	Absorbance

What is the absorbance of a 1 µM solution of mCherry at its absorption maximum at a path length of $1 \ \mathrm{cm}$?

```{python}
#| exercise: true
#| eval: false
c = ... # Put the concentration in Molar
l = ... # Path length in cm
A_max = ... # Calculate the adsorbance.
print(f"{A_max = :3.3f}")
```

```{python}
#| solution: true
c = 1 * 10**(-6) # [M]
l = 1 # [cm]
A_max = EC * c * l
print(f"{A_max = :3.3f}")
```

#### (c)	Extinction coefficient from sequence. 

::: {.callout-note}

We will treat the sequence as a `str`, like any other text, `str`'s are defined like

```{python}
one_line_string = "This is some text, that makes up my string."
```
Which uses `"`-quotation marks around the text, for longer strings it can be useful to instead use 
```{python}
multi_line_string = """This is a very long text, so long in fact that it 
takes up multiple lines and I therefore use a slightly different syntax. 
To make the string longer I will confess that I am hungry right now.
"""
```
:::

The sequence of the protein is also given. From this determine the extinction coefficient at 280 nm.

Start by taking the sequence from the website and assigning it to the variable `sequence` in the cell below. 

```{python}
#| exercise: true
#| eval: false
sequence = """
Put the sequence in here to make a str with the sequence. 
Remember to remove this text as it is not part of the sequence. 
"""
```
```{python}
#| solution: true
sequence="""MVSKGEEDNM AIIKEFMRFK VHMEGSVNGH EFEIEGEGEG RPYEGTQTAK LKVTKGGPLP FAWDILSPQF MYGSKAYVKH PADIPDYLKL SFPEGFKWER VMNFEDGGVV TVTQDSSLQD GEFIYKVKLR GTNFPSDGPV MQKKTMGWEA SSERMYPEDG ALKGEIKQRL KLKDGGHYDA EVKTTYKAKK PVQLPGAYNV NIKLDITSHN EDYTIVEQYE RAEGRHSTGG MDELYK"""
```

Now use the sequence to calculate the extinction coefficient, finish the code below 
(or take the function you implemented in a previous exercise!)

```{python}
#| exercise: true
#| eval: false

# This is "dictionary" with the extinction coefficients of the relevant 
# amino acid residues. Dictionaries are indexed with 'keys', so you can retrieve
# the value for W as: ext_residue["W"].
ext_residue = {"W": 5500, "Y": 1490, "C": 125}

# Write code to calculate the extinction coefficent
...
```

```{python}
#| solution: true

# This is 'dictionary' with the extinction coefficients of the relevant 
# amino acid residues. Dictionaries are indexed with 'keys', so you can retrieve
# the value for W as: ext_residue["W"].
ext_residue = {"W": 5500, "Y": 1490, "C": 125}

# Count the number of active residues
N_trp = sequence.count("W")
N_tyr = sequence.count("Y")
N_cys = sequence.count("C")

# Calculate the extinction coefficient: 
ext_coeff = N_trp * ext_residue["W"] + N_tyr * ext_residue["Y"] + N_cys * ext_residue["C"]

print(f"{ext_coeff = :3.3f}")
```

#### (d) Concentration from A280nm 

What is the molar concentration of solution of mCherry with an A_280nm of 0.45

```{python}
#| exercise: true
#| eval: false
A280 = ...
c_mol = ...
print(c_mol)
```

```{python}
#| solution: true
A280 = 0.45
c_mol = A280 / (ext_coeff)
print(c_mol)
```

---

The excitation and emission spectra can be downloaded as a csv-file by clicking the download icon as highlighted below

::: {#fig-download-csv}

<img width=300 src="https://raw.githubusercontent.com/au-mbg/fysisk-biokemi/refs/heads/main/course/lessons/figures/week_47/download_spectra.png">

Screenshot of the download button on fpbase

:::

---

#### (e) Load the dataset

Go to [www.fpbase.org](https://www.fpbase.org/) and download the spectrum as described 
above. 

Use the widget below to load the dataset as a `DataFrame`

```{python}
#| eval: false
from fysisk_biokemi.widgets import DataUploader
from IPython.display import display 
uploader = DataUploader()
uploader.display()
```

Run the next cell **after** uploading the file

```{python}
#| eval: false
df = uploader.get_dataframe()
display(df)
```

```{python}
#| solution: true
from IPython.display import display 
from fysisk_biokemi.datasets import load_dataset
df = load_dataset('mCherry') # Load from package for the solution so it doesn't require to interact.
display(df)
```

#### (f)	Plot spectra

Make your own plot showing the excitation and emission spectra of “mCherry” using the above data.

```{python}
#| exercise: true
#| eval: false
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(9, 4))
ax.plot(..., ..., label='Excitation') # Replace ... with your code
... # Replace ... with your code plotting the emission spectrum.
ax.legend()
ax.set_xlabel('Wavelength')
ax.set_ylabel('Extinction & Emission')
plt.show()
```

```{python}
#| solution: true
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(9, 4))
ax.plot(df['wavelength'], df['mCherry ex'], label='Excitation')
ax.plot(df['wavelength'], df['mCherry em'], label='Emission')
ax.legend()
ax.set_xlabel('Wavelength')
ax.set_ylabel('Extinction & Emission')
plt.show()
```

#### (g)	Stokes shift

Estimate the Stokes shift of mCherry from the plot. 

```{python}
#| solution: true
estimated_stokes_shift = 30 # Your estimation
```

```{python}
#| exercise: true
#| eval: false
estimated_stokes_shift = ... # Your estimation
```

The cell below shows how this could calculated using Python 

```{python}
#| exercise: true
#| eval: false
#| solution: true
import numpy as np
# Start by extracting the wavelengths from the DataFrame
wavelengths = df['wavelength']

# Find the indices
ex_max_idx = np.argmax(df['mCherry ex'])
em_max_idx = np.argmax(df['mCherry em'])

# Use the index to find the corresponding wavelengths
lambda_ex = wavelengths[ex_max_idx]
lambda_em = wavelengths[em_max_idx]

stokes_shift = lambda_em - lambda_ex

print(f"{lambda_ex = :d}")
print(f"{lambda_em = :d}")
print(f"{stokes_shift = :d}")
print(f"{estimated_stokes_shift = :d}")
```

```{python}
#| solution: true
import numpy as np
# Start by extracting the wavelengths from the DataFrame
wavelengths = df['wavelength']

# Find the indices
ex_max_idx = np.argmax(df['mCherry ex'])
em_max_idx = np.argmax(df['mCherry em'])

# Use the index to find the corresponding wavelengths
lambda_ex = wavelengths[ex_max_idx]
lambda_em = wavelengths[em_max_idx]

stokes_shift = lambda_em - lambda_ex

print(f"{lambda_ex = :d}")
print(f"{lambda_em = :d}")
print(f"{stokes_shift = :d}")
print(f"{estimated_stokes_shift = :d}")
```

::: {.callout-tip}

If you have two arrays `A` and `B` you can find the entry in `A` corresponding to the largest 
value in `B` like this 

```python
A_at_B_max = A[np.argmax(B)]
```
The `np.argmax` stands for **arg**ument **max**imum meaning that it finds the index of 
the maximum value in a given array. The figure below illustrates this 

::: {#fig-npargmax}

<img width=300 src="https://raw.githubusercontent.com/au-mbg/fysisk-biokemi/refs/heads/main/course/lessons/figures/week_47/np_argmax.png">

Illustration of argmax

:::
::: 


#### (h)	Colors 

Compare to a plot of the visual spectrum. What colors are the light that correspond to the excitation and emission maxima respectively? 

Why do you think the protein is called *Cherry*?